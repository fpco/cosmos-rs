#![allow(missing_docs)]
///////////// AUTOGENERATED FILE VIA TONIC-BUILD (DO NOT MODIFY) //////////////////////////////

/// Phase defines the phase parameters for the module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phase {
    /// inflation is the current phase inflation rate.
    #[prost(string, tag = "1")]
    pub inflation: ::prost::alloc::string::String,
    /// year_coefficient is the proportion of a complete year.
    #[prost(string, tag = "2")]
    pub year_coefficient: ::prost::alloc::string::String,
}
/// Params define the parameters for the module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// mint_denom is the type of coin to mint.
    #[prost(string, tag = "1")]
    pub mint_denom: ::prost::alloc::string::String,
    /// blocks_per_year is expected blocks per year.
    #[prost(int64, tag = "2")]
    pub blocks_per_year: i64,
    /// phases contains phases of inflation.
    #[prost(message, repeated, tag = "3")]
    pub phases: ::prost::alloc::vec::Vec<Phase>,
    /// exclude_amount is the excluded amount form being calculated in inflation.
    #[prost(string, tag = "4")]
    pub exclude_amount: ::prost::alloc::string::String,
}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
/// Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
/// Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params contains all of the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryInflationRequest is the request type for the Query/Inflation RPC method.
/// Query/Inflation RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInflationRequest {}
/// QueryInflationResponse is the response type for the Query/Inflation RPC
/// method.
/// Query/Inflation RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryInflationResponse {
    /// inflation is the current minting inflation value.
    #[prost(bytes = "vec", tag = "1")]
    pub inflation: ::prost::alloc::vec::Vec<u8>,
}
/// QueryPhaseStepRequest is the request type for the Query/Inflation RPC method.
/// Query/PhaseStep RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPhaseStepRequest {}
/// QueryPhaseStepResponse is the response type for the Query/Inflation RPC
/// method.
/// Query/PhaseStep RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPhaseStepResponse {
    /// phase_step is the current phase number of the blockchain.
    #[prost(int32, tag = "1")]
    pub phase_step: i32,
}
/// QueryPhaseProvisionsRequest is the request type for the
/// Query/PhaseProvisions RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPhaseProvisionsRequest {}
/// QueryPhaseProvisionsResponse is the response type for the
/// Query/PhaseProvisions RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPhaseProvisionsResponse {
    /// phase_provisions is the current minting phase provisions value.
    #[prost(bytes = "vec", tag = "1")]
    pub phase_provisions: ::prost::alloc::vec::Vec<u8>,
}
/// QueryEndPhaseStatusRequest is the request type for the Query/Inflation RPC
/// method.
/// Query/EndPhaseStatus RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEndPhaseStatusRequest {}
/// QueryEndPhaseStatusResponse is the response type for the Query/Inflation RPC
/// method.
/// Query/EndPhaseStatus RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEndPhaseStatusResponse {
    /// is_in_end_phase is true if there is no more valid phase in the mint
    /// parameters.
    #[prost(bool, tag = "1")]
    pub is_in_end_phase: bool,
}
/// Generated client implementations.
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: std::convert::TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Params queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> Result<tonic::Response<super::QueryParamsResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sgenetwork.sge.mint.Query/Params");
            self.inner.unary(request.into_request(), path, codec).await
        }
        /// Inflation returns the current minting inflation value.
        pub async fn inflation(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryInflationRequest>,
        ) -> Result<tonic::Response<super::QueryInflationResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sgenetwork.sge.mint.Query/Inflation");
            self.inner.unary(request.into_request(), path, codec).await
        }
        /// PhaseStep returns the current phase step.
        pub async fn phase_step(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPhaseStepRequest>,
        ) -> Result<tonic::Response<super::QueryPhaseStepResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/sgenetwork.sge.mint.Query/PhaseStep");
            self.inner.unary(request.into_request(), path, codec).await
        }
        /// PhaseProvisions current minting phase provisions value.
        pub async fn phase_provisions(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPhaseProvisionsRequest>,
        ) -> Result<tonic::Response<super::QueryPhaseProvisionsResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/sgenetwork.sge.mint.Query/PhaseProvisions");
            self.inner.unary(request.into_request(), path, codec).await
        }
        /// EndPhaseStatus returns the current minting phase status.
        pub async fn end_phase_status(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEndPhaseStatusRequest>,
        ) -> Result<tonic::Response<super::QueryEndPhaseStatusResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path =
                http::uri::PathAndQuery::from_static("/sgenetwork.sge.mint.Query/EndPhaseStatus");
            self.inner.unary(request.into_request(), path, codec).await
        }
    }
}
